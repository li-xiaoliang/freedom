//Package po generated by 'freedom new-po'
package po

import (
	"github.com/jinzhu/gorm"
	"time"
)

// DomainEventSubscribe .
type DomainEventSubscribe struct {
	changes  map[string]interface{}
	ID       int       `gorm:"primary_key;column:id"`
	Topic    string    `gorm:"column:topic"`
	Progress int       `gorm:"column:progress"` // 0未处理，1处理
	Content  string    `gorm:"column:content"`  // 内容
	Created  time.Time `gorm:"column:created"`
	Updated  time.Time `gorm:"column:updated"`
}

// TableName .
func (obj *DomainEventSubscribe) TableName() string {
	return "domain_event_subscribe"
}

// TakeChanges .
func (obj *DomainEventSubscribe) TakeChanges() map[string]interface{} {
	if obj.changes == nil {
		return nil
	}
	result := make(map[string]interface{})
	for k, v := range obj.changes {
		result[k] = v
	}
	obj.changes = nil
	return result
}

// updateChanges .
func (obj *DomainEventSubscribe) setChanges(name string, value interface{}) {
	if obj.changes == nil {
		obj.changes = make(map[string]interface{})
	}
	obj.changes[name] = value
}

// SetTopic .
func (obj *DomainEventSubscribe) SetTopic(topic string) {
	obj.Topic = topic
	obj.setChanges("topic", topic)
}

// SetProgress .
func (obj *DomainEventSubscribe) SetProgress(progress int) {
	obj.Progress = progress
	obj.setChanges("progress", progress)
}

// SetContent .
func (obj *DomainEventSubscribe) SetContent(content string) {
	obj.Content = content
	obj.setChanges("content", content)
}

// SetCreated .
func (obj *DomainEventSubscribe) SetCreated(created time.Time) {
	obj.Created = created
	obj.setChanges("created", created)
}

// SetUpdated .
func (obj *DomainEventSubscribe) SetUpdated(updated time.Time) {
	obj.Updated = updated
	obj.setChanges("updated", updated)
}

// AddProgress .
func (obj *DomainEventSubscribe) AddProgress(progress int) {
	obj.Progress += progress
	obj.setChanges("progress", gorm.Expr("progress + ?", progress))
}
